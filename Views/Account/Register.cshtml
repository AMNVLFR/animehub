@model dynamic

@{
    ViewData["Title"] = "Register";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Register</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Register" method="post">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username" required>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="password" name="password" required>
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="fas fa-eye" id="passwordIcon"></i>
                                </button>
                            </div>
                            <div id="password-requirements" class="mt-2">
                                <small class="text-muted">Password must contain:</small>
                                <ul class="list-unstyled small mt-1">
                                    <li id="length-check" class="requirement">
                                        <i class="fas fa-times text-danger"></i> At least 6 characters
                                    </li>
                                    <li id="uppercase-check" class="requirement">
                                        <i class="fas fa-times text-danger"></i> At least one uppercase letter
                                    </li>
                                    <li id="lowercase-check" class="requirement">
                                        <i class="fas fa-times text-danger"></i> At least one lowercase letter
                                    </li>
                                    <li id="digit-check" class="requirement">
                                        <i class="fas fa-times text-danger"></i> At least one number
                                    </li>
                                    <li id="special-check" class="requirement">
                                        <i class="fas fa-times text-danger"></i> At least one special character
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                    <i class="fas fa-eye" id="confirmPasswordIcon"></i>
                                </button>
                            </div>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-anime">Register</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <p class="text-dark">Already have an account? <a href="@Url.Action("Login", "Account")">Login here</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Password visibility toggles
            const togglePassword = document.getElementById('togglePassword');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const passwordIcon = document.getElementById('passwordIcon');
            const confirmPasswordIcon = document.getElementById('confirmPasswordIcon');

            function togglePasswordVisibility(input, icon) {
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);

                // Toggle icon
                if (type === 'password') {
                    icon.className = 'fas fa-eye';
                } else {
                    icon.className = 'fas fa-eye-slash';
                }
            }

            togglePassword.addEventListener('click', function() {
                togglePasswordVisibility(passwordInput, passwordIcon);
            });

            toggleConfirmPassword.addEventListener('click', function() {
                togglePasswordVisibility(confirmPasswordInput, confirmPasswordIcon);
            });

            // Password requirements validation
            const requirements = {
                length: document.getElementById('length-check'),
                uppercase: document.getElementById('uppercase-check'),
                lowercase: document.getElementById('lowercase-check'),
                digit: document.getElementById('digit-check'),
                special: document.getElementById('special-check')
            };

            function updateRequirement(requirement, isValid) {
                const icon = requirement.querySelector('i');
                if (isValid) {
                    requirement.classList.add('valid');
                    requirement.classList.remove('invalid');
                    icon.className = 'fas fa-check text-success';
                } else {
                    requirement.classList.add('invalid');
                    requirement.classList.remove('valid');
                    icon.className = 'fas fa-times text-danger';
                }
            }

            function validatePassword(password) {
                updateRequirement(requirements.length, password.length >= 6);
                updateRequirement(requirements.uppercase, /[A-Z]/.test(password));
                updateRequirement(requirements.lowercase, /[a-z]/.test(password));
                updateRequirement(requirements.digit, /\d/.test(password));
                updateRequirement(requirements.special, /[^A-Za-z0-9]/.test(password));
            }

            passwordInput.addEventListener('input', function() {
                validatePassword(this.value);
            });

            // Initial validation on page load
            validatePassword(passwordInput.value);
        });
    </script>
}